node {
    properties([
            parameters([
                    [$class: 'ChoiceParameter', name: 'BROWSER',
                     choiceType: 'PT_RADIO',
                     description: 'Select required browser type',
                     script: [$class: 'GroovyScript',
                             fallbackScript: [classpath: [], sandbox: true, script:
                                     'return["Unknown browser"]'
                             ],
                             script: [classpath: [], sandbox: true, script:
                                     'return ["chrome:selected","firefox","opera"]'
                             ]
                     ]
                    ],
                    [$class: 'CascadeChoiceParameter', name: 'VERSION',
                     referencedParameters: 'BROWSER',
                     choiceType: 'PT_RADIO',
                     description: 'Select target browser type version',
                     script: [$class: 'GroovyScript',
                             fallbackScript: [classpath: [], sandbox: true, script:
                                     'return["Unknown version"]'
                             ],
                             script: [classpath: [], sandbox: true, script:
                                '''
                                    switch(BROWSER){
                                        case "chrome": return ["81:selected", "80"]
                                        case "firefox": return ["76:selected", "75"]
                                        case "opera": return ["67:selected", "66"]
                                    }
                                '''
                             ]
                     ]
                    ]
            ])
    ])
}

def mavenDebugFlag = ""

pipeline {
    agent none
    options {
        skipDefaultCheckout true
        timestamps()
    }
    parameters {
        gitParameter name: 'CI_SCRIPTS',
                type: 'PT_BRANCH',
                useRepository: '.*jenkins\\-iac\\-ci.git',
                branchFilter: 'origin/(.*)',
                defaultValue: 'master',
                selectedValue: 'DEFAULT',
                description: 'Infrastructure provisioning source'
        gitParameter name: 'SELENIUM',
                type: 'PT_BRANCH',
                useRepository: '.*selenium.*',
                branchFilter: 'origin/(.*)',
                defaultValue: 'master',
                selectedValue: 'DEFAULT',
                description: 'Integration test source'
        booleanParam name: 'DELETE_APP', description: 'Delete application and database containers after build', defaultValue: true
        booleanParam name: 'MAVEN_DEBUG', description: 'Maven logger debug level', defaultValue: false
    }

    stages {
        stage('Checkout infrastructure scripts') {
            agent { label 'master' }
            steps {
                cleanWs deleteDirs: true
                checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: CI_SCRIPTS]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'infrastructure']],
                        userRemoteConfigs: [[url: 'https://github.com/ehabibov/jenkins-iac-ci.git']]
                ]
            }
        }

        stage('Deploy application env') {
            agent { label 'master' }
            steps {
                ansiColor('xterm') {
                    ansiblePlaybook(inventory: 'infrastructure/ansible/hosts',
                            playbook: 'infrastructure/ansible/application.yml',
                            tags: "app-deploy", colorized: true, extras: "-v")
                }
            }
        }
        stage("Deploy selenoid env"){
            agent { label 'master'}
            steps {
                ansiColor('xterm') {
                    ansiblePlaybook(inventory: 'infrastructure/ansible/hosts',
                            playbook: 'infrastructure/ansible/selenoid.yml',
                            tags: "selenoid-deploy", colorized: true, extras: "-v")
                }
            }
        }
        stage('Integration test') {
            agent { label 'docker-agent'}
            tools {
                maven 'Maven3'
                allure 'Allure2'
            }
            steps {
                checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: SELENIUM]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'integration']],
                        userRemoteConfigs: [[url: 'https://github.com/ehabibov/selenium-testng.git']]
                ]
                dir ("integration"){
                    sh script: "mvn -ntp dependency:resolve", label: "Resolve project dependencies"
                    sh script: "mvn -ntp dependency:resolve-plugins", label: "Resolve project plugin dependencies"
                    script {
                        if (params.MAVEN_DEBUG == true){
                            mavenDebugFlag = "-X"
                        }
                    }
                    sh script: """
                        mvn test ${mavenDebugFlag} --no-transfer-progress --batch-mode --fail-at-end --errors\
                        -Dremote.test.run.name=${env.BUILD_TAG}\
                        -Dremote.driver=true\
                        -Dbrowser.type=${params.BROWSER}\
                        -Dremote.browser.version=${params.VERSION}\
                        -Dremote.driver.host=selenoid-${env.JOB_NAME}\
                        -Dremote.driver.port=4444\
                        -Dapplication.host=http://orange-hrm-${env.JOB_NAME}\
                        -Dapplication.port=80\
                    """, label: 'Execute tests'
                    archiveArtifacts artifacts: 'target/**/*.*'
                    allure results: [[path: 'target/allure-results']]
                }
            }
        }
        stage("Destroy application env"){
            agent { label 'master'}
            when {
                expression { params.DELETE_APP.toBoolean() }
            }
            steps {
                ansiColor('xterm') {
                    ansiblePlaybook(inventory: 'infrastructure/ansible/hosts',
                            playbook: 'infrastructure/ansible/application.yml',
                            tags: "app-destroy", colorized: true, extras: "-v")
                }
            }
        }
        stage("Destroy selenoid env"){
            agent { label 'master'}
            steps {
                ansiColor('xterm') {
                    ansiblePlaybook(inventory: 'infrastructure/ansible/hosts',
                            playbook: 'infrastructure/ansible/selenoid.yml',
                            tags: "selenoid-destroy", colorized: true, extras: "-v")
                }
            }
        }
    }
}